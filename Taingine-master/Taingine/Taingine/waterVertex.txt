#version 400 core

in vec2 position;

out vec4 clipSpace;
out vec2 textureCoords;
out vec3 toCameraVector; //This is the vector pointing from the vertex to the camera
out vec3 fromLightVector; //this calculates the vector from the light to the water 

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition; //this is used to apply the fresnel effect - see error notes 
uniform vec3 lightPosition; //remember... the vertexShader is all about WHERE the vertexes are

const float tiling = 4.0; //this is similar to the tiling we used in the terrain

void main(void){
	vec4 worldPosition = modelMatrix * vec4(position.x, 0.0, position.y, 1.0);
	clipSpace = projectionMatrix * viewMatrix * worldPosition;
	gl_Position = clipSpace;
	textureCoords = vec2(position.x/2.0 + 0.5, position.y/2.0 + 0.5) * tiling; //multiplying by the tiling const will tile the texture 
	toCameraVector = cameraPosition - worldPosition.xyz;
	fromLightVector = worldPosition.xyz - lightPosition; 
}